// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "inputencryptedfile.h"

using namespace Tg;
using namespace Types;

Types::InputEncryptedFile::InputEncryptedFile(InputEncryptedFileType classType, InboundPkt *in) :
    m_accessHash(0),
    m_id(0),
    m_keyFingerprint(0),
    m_parts(0),
    m_classType(classType)
{
    if(in) fetch(in);
}

Types::InputEncryptedFile::InputEncryptedFile(InboundPkt *in) :
    m_accessHash(0),
    m_id(0),
    m_keyFingerprint(0),
    m_parts(0),
    m_classType(typeInputEncryptedFileEmpty)
{
    fetch(in);
}

void Types::InputEncryptedFile::setAccessHash(qint64 accessHash) {
    m_accessHash = accessHash;
}

qint64 Types::InputEncryptedFile::accessHash() const {
    return m_accessHash;
}

void Types::InputEncryptedFile::setId(qint64 id) {
    m_id = id;
}

qint64 Types::InputEncryptedFile::id() const {
    return m_id;
}

void Types::InputEncryptedFile::setKeyFingerprint(qint32 keyFingerprint) {
    m_keyFingerprint = keyFingerprint;
}

qint32 Types::InputEncryptedFile::keyFingerprint() const {
    return m_keyFingerprint;
}

void Types::InputEncryptedFile::setMd5Checksum(const QString &md5Checksum) {
    m_md5Checksum = md5Checksum;
}

QString Types::InputEncryptedFile::md5Checksum() const {
    return m_md5Checksum;
}

void Types::InputEncryptedFile::setParts(qint32 parts) {
    m_parts = parts;
}

qint32 Types::InputEncryptedFile::parts() const {
    return m_parts;
}

bool Types::InputEncryptedFile::operator ==(const InputEncryptedFile &b) {
    return m_accessHash == b.m_accessHash &&
           m_id == b.m_id &&
           m_keyFingerprint == b.m_keyFingerprint &&
           m_md5Checksum == b.m_md5Checksum &&
           m_parts == b.m_parts;
}

void Types::InputEncryptedFile::setClassType(InputEncryptedFile::InputEncryptedFileType classType) {
    m_classType = classType;
}

Types::InputEncryptedFile::InputEncryptedFileType Types::InputEncryptedFile::classType() const {
    return m_classType;
}

bool Types::InputEncryptedFile::fetch(InboundPkt *in) {
    LQTG_FETCH_LOG;
    int x = in->fetchInt();
    switch(x) {
    case typeInputEncryptedFileEmpty: {
        m_classType = static_cast<InputEncryptedFileType>(x);
        return true;
    }
        break;
    
    case typeInputEncryptedFileUploaded: {
        m_id = in->fetchLong();
        m_parts = in->fetchInt();
        m_md5Checksum = in->fetchQString();
        m_keyFingerprint = in->fetchInt();
        m_classType = static_cast<InputEncryptedFileType>(x);
        return true;
    }
        break;
    
    case typeInputEncryptedFile: {
        m_id = in->fetchLong();
        m_accessHash = in->fetchLong();
        m_classType = static_cast<InputEncryptedFileType>(x);
        return true;
    }
        break;
    
    case typeInputEncryptedFileBigUploaded: {
        m_id = in->fetchLong();
        m_parts = in->fetchInt();
        m_keyFingerprint = in->fetchInt();
        m_classType = static_cast<InputEncryptedFileType>(x);
        return true;
    }
        break;
    
    default:
        LQTG_FETCH_ASSERT;
        return false;
    }
}

bool Types::InputEncryptedFile::push(OutboundPkt *out) const {
    out->appendInt(m_classType);
    switch(m_classType) {
    case typeInputEncryptedFileEmpty: {
        return true;
    }
        break;
    
    case typeInputEncryptedFileUploaded: {
        out->appendLong(m_id);
        out->appendInt(m_parts);
        out->appendQString(m_md5Checksum);
        out->appendInt(m_keyFingerprint);
        return true;
    }
        break;
    
    case typeInputEncryptedFile: {
        out->appendLong(m_id);
        out->appendLong(m_accessHash);
        return true;
    }
        break;
    
    case typeInputEncryptedFileBigUploaded: {
        out->appendLong(m_id);
        out->appendInt(m_parts);
        out->appendInt(m_keyFingerprint);
        return true;
    }
        break;
    
    default:
        return false;
    }
}

