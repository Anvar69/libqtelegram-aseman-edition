// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "storagefiletype.h"

using namespace Tg;
using namespace Types;

Types::StorageFileType::StorageFileType(StorageFileTypeType classType, InboundPkt *in) :
    m_classType(classType)
{
    if(in) fetch(in);
}

Types::StorageFileType::StorageFileType(InboundPkt *in) :
    m_classType(typeStorageFileUnknown)
{
    fetch(in);
}

bool Types::StorageFileType::operator ==(const StorageFileType &b) {
    Q_UNUSED(b);
    return true;
}

void Types::StorageFileType::setClassType(StorageFileType::StorageFileTypeType classType) {
    m_classType = classType;
}

Types::StorageFileType::StorageFileTypeType Types::StorageFileType::classType() const {
    return m_classType;
}

bool Types::StorageFileType::fetch(InboundPkt *in) {
    LQTG_FETCH_LOG;
    int x = in->fetchInt();
    switch(x) {
    case typeStorageFileUnknown: {
        m_classType = static_cast<StorageFileTypeType>(x);
        return true;
    }
        break;
    
    case typeStorageFileJpeg: {
        m_classType = static_cast<StorageFileTypeType>(x);
        return true;
    }
        break;
    
    case typeStorageFileGif: {
        m_classType = static_cast<StorageFileTypeType>(x);
        return true;
    }
        break;
    
    case typeStorageFilePng: {
        m_classType = static_cast<StorageFileTypeType>(x);
        return true;
    }
        break;
    
    case typeStorageFilePdf: {
        m_classType = static_cast<StorageFileTypeType>(x);
        return true;
    }
        break;
    
    case typeStorageFileMp3: {
        m_classType = static_cast<StorageFileTypeType>(x);
        return true;
    }
        break;
    
    case typeStorageFileMov: {
        m_classType = static_cast<StorageFileTypeType>(x);
        return true;
    }
        break;
    
    case typeStorageFilePartial: {
        m_classType = static_cast<StorageFileTypeType>(x);
        return true;
    }
        break;
    
    case typeStorageFileMp4: {
        m_classType = static_cast<StorageFileTypeType>(x);
        return true;
    }
        break;
    
    case typeStorageFileWebp: {
        m_classType = static_cast<StorageFileTypeType>(x);
        return true;
    }
        break;
    
    default:
        LQTG_FETCH_ASSERT;
        return false;
    }
}

bool Types::StorageFileType::push(OutboundPkt *out) const {
    out->appendInt(m_classType);
    switch(m_classType) {
    case typeStorageFileUnknown: {
        return true;
    }
        break;
    
    case typeStorageFileJpeg: {
        return true;
    }
        break;
    
    case typeStorageFileGif: {
        return true;
    }
        break;
    
    case typeStorageFilePng: {
        return true;
    }
        break;
    
    case typeStorageFilePdf: {
        return true;
    }
        break;
    
    case typeStorageFileMp3: {
        return true;
    }
        break;
    
    case typeStorageFileMov: {
        return true;
    }
        break;
    
    case typeStorageFilePartial: {
        return true;
    }
        break;
    
    case typeStorageFileMp4: {
        return true;
    }
        break;
    
    case typeStorageFileWebp: {
        return true;
    }
        break;
    
    default:
        return false;
    }
}

