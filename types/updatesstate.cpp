// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "updatesstate.h"

using namespace Tg;
using namespace Types;

Types::UpdatesState::UpdatesState(UpdatesStateType classType, InboundPkt *in) :
    m_date(0),
    m_pts(0),
    m_qts(0),
    m_seq(0),
    m_unreadCount(0),
    m_classType(classType)
{
    if(in) fetch(in);
}

Types::UpdatesState::UpdatesState(InboundPkt *in) :
    m_date(0),
    m_pts(0),
    m_qts(0),
    m_seq(0),
    m_unreadCount(0),
    m_classType(typeUpdatesState)
{
    fetch(in);
}

void Types::UpdatesState::setDate(qint32 date) {
    m_date = date;
}

qint32 Types::UpdatesState::date() const {
    return m_date;
}

void Types::UpdatesState::setPts(qint32 pts) {
    m_pts = pts;
}

qint32 Types::UpdatesState::pts() const {
    return m_pts;
}

void Types::UpdatesState::setQts(qint32 qts) {
    m_qts = qts;
}

qint32 Types::UpdatesState::qts() const {
    return m_qts;
}

void Types::UpdatesState::setSeq(qint32 seq) {
    m_seq = seq;
}

qint32 Types::UpdatesState::seq() const {
    return m_seq;
}

void Types::UpdatesState::setUnreadCount(qint32 unreadCount) {
    m_unreadCount = unreadCount;
}

qint32 Types::UpdatesState::unreadCount() const {
    return m_unreadCount;
}

bool Types::UpdatesState::operator ==(const UpdatesState &b) {
    return m_date == b.m_date &&
           m_pts == b.m_pts &&
           m_qts == b.m_qts &&
           m_seq == b.m_seq &&
           m_unreadCount == b.m_unreadCount;
}

void Types::UpdatesState::setClassType(UpdatesState::UpdatesStateType classType) {
    m_classType = classType;
}

Types::UpdatesState::UpdatesStateType Types::UpdatesState::classType() const {
    return m_classType;
}

bool Types::UpdatesState::fetch(InboundPkt *in) {
    LQTG_FETCH_LOG;
    int x = in->fetchInt();
    switch(x) {
    case typeUpdatesState: {
        m_pts = in->fetchInt();
        m_qts = in->fetchInt();
        m_date = in->fetchInt();
        m_seq = in->fetchInt();
        m_unreadCount = in->fetchInt();
        m_classType = static_cast<UpdatesStateType>(x);
        return true;
    }
        break;
    
    default:
        LQTG_FETCH_ASSERT;
        return false;
    }
}

bool Types::UpdatesState::push(OutboundPkt *out) const {
    out->appendInt(m_classType);
    switch(m_classType) {
    case typeUpdatesState: {
        out->appendInt(m_pts);
        out->appendInt(m_qts);
        out->appendInt(m_date);
        out->appendInt(m_seq);
        out->appendInt(m_unreadCount);
        return true;
    }
        break;
    
    default:
        return false;
    }
}

