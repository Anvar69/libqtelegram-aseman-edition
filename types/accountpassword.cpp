// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "accountpassword.h"

using namespace Tg;
using namespace Types;

Types::AccountPassword::AccountPassword(AccountPasswordType classType, InboundPkt *in) :
    m_hasRecovery(false),
    m_classType(classType)
{
    if(in) fetch(in);
}

Types::AccountPassword::AccountPassword(InboundPkt *in) :
    m_hasRecovery(false),
    m_classType(typeAccountNoPassword)
{
    fetch(in);
}

void Types::AccountPassword::setCurrentSalt(const QByteArray &currentSalt) {
    m_currentSalt = currentSalt;
}

QByteArray Types::AccountPassword::currentSalt() const {
    return m_currentSalt;
}

void Types::AccountPassword::setEmailUnconfirmedPattern(const QString &emailUnconfirmedPattern) {
    m_emailUnconfirmedPattern = emailUnconfirmedPattern;
}

QString Types::AccountPassword::emailUnconfirmedPattern() const {
    return m_emailUnconfirmedPattern;
}

void Types::AccountPassword::setHasRecovery(bool hasRecovery) {
    m_hasRecovery = hasRecovery;
}

bool Types::AccountPassword::hasRecovery() const {
    return m_hasRecovery;
}

void Types::AccountPassword::setHint(const QString &hint) {
    m_hint = hint;
}

QString Types::AccountPassword::hint() const {
    return m_hint;
}

void Types::AccountPassword::setNewSalt(const QByteArray &newSalt) {
    m_newSalt = newSalt;
}

QByteArray Types::AccountPassword::newSalt() const {
    return m_newSalt;
}

bool Types::AccountPassword::operator ==(const AccountPassword &b) {
    return m_currentSalt == b.m_currentSalt &&
           m_emailUnconfirmedPattern == b.m_emailUnconfirmedPattern &&
           m_hasRecovery == b.m_hasRecovery &&
           m_hint == b.m_hint &&
           m_newSalt == b.m_newSalt;
}

void Types::AccountPassword::setClassType(AccountPassword::AccountPasswordType classType) {
    m_classType = classType;
}

Types::AccountPassword::AccountPasswordType Types::AccountPassword::classType() const {
    return m_classType;
}

bool Types::AccountPassword::fetch(InboundPkt *in) {
    LQTG_FETCH_LOG;
    int x = in->fetchInt();
    switch(x) {
    case typeAccountNoPassword: {
        m_newSalt = in->fetchBytes();
        m_emailUnconfirmedPattern = in->fetchQString();
        m_classType = static_cast<AccountPasswordType>(x);
        return true;
    }
        break;
    
    case typeAccountPassword: {
        m_currentSalt = in->fetchBytes();
        m_newSalt = in->fetchBytes();
        m_hint = in->fetchQString();
        m_hasRecovery = in->fetchBool();
        m_emailUnconfirmedPattern = in->fetchQString();
        m_classType = static_cast<AccountPasswordType>(x);
        return true;
    }
        break;
    
    default:
        LQTG_FETCH_ASSERT;
        return false;
    }
}

bool Types::AccountPassword::push(OutboundPkt *out) const {
    out->appendInt(m_classType);
    switch(m_classType) {
    case typeAccountNoPassword: {
        out->appendBytes(m_newSalt);
        out->appendQString(m_emailUnconfirmedPattern);
        return true;
    }
        break;
    
    case typeAccountPassword: {
        out->appendBytes(m_currentSalt);
        out->appendBytes(m_newSalt);
        out->appendQString(m_hint);
        out->appendBool(m_hasRecovery);
        out->appendQString(m_emailUnconfirmedPattern);
        return true;
    }
        break;
    
    default:
        return false;
    }
}

