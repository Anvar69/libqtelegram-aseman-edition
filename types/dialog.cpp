// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "dialog.h"

using namespace Tg;
using namespace Types;

Types::Dialog::Dialog(DialogType classType, InboundPkt *in) :
    m_readInboxMaxId(0),
    m_topMessage(0),
    m_unreadCount(0),
    m_classType(classType)
{
    if(in) fetch(in);
}

Types::Dialog::Dialog(InboundPkt *in) :
    m_readInboxMaxId(0),
    m_topMessage(0),
    m_unreadCount(0),
    m_classType(typeDialog)
{
    fetch(in);
}

void Types::Dialog::setNotifySettings(const PeerNotifySettings &notifySettings) {
    m_notifySettings = notifySettings;
}

PeerNotifySettings Types::Dialog::notifySettings() const {
    return m_notifySettings;
}

void Types::Dialog::setPeer(const Peer &peer) {
    m_peer = peer;
}

Peer Types::Dialog::peer() const {
    return m_peer;
}

void Types::Dialog::setReadInboxMaxId(qint32 readInboxMaxId) {
    m_readInboxMaxId = readInboxMaxId;
}

qint32 Types::Dialog::readInboxMaxId() const {
    return m_readInboxMaxId;
}

void Types::Dialog::setTopMessage(qint32 topMessage) {
    m_topMessage = topMessage;
}

qint32 Types::Dialog::topMessage() const {
    return m_topMessage;
}

void Types::Dialog::setUnreadCount(qint32 unreadCount) {
    m_unreadCount = unreadCount;
}

qint32 Types::Dialog::unreadCount() const {
    return m_unreadCount;
}

bool Types::Dialog::operator ==(const Dialog &b) {
    return m_notifySettings == b.m_notifySettings &&
           m_peer == b.m_peer &&
           m_readInboxMaxId == b.m_readInboxMaxId &&
           m_topMessage == b.m_topMessage &&
           m_unreadCount == b.m_unreadCount;
}

void Types::Dialog::setClassType(Dialog::DialogType classType) {
    m_classType = classType;
}

Types::Dialog::DialogType Types::Dialog::classType() const {
    return m_classType;
}

bool Types::Dialog::fetch(InboundPkt *in) {
    LQTG_FETCH_LOG;
    int x = in->fetchInt();
    switch(x) {
    case typeDialog: {
        m_peer.fetch(in);
        m_topMessage = in->fetchInt();
        m_readInboxMaxId = in->fetchInt();
        m_unreadCount = in->fetchInt();
        m_notifySettings.fetch(in);
        m_classType = static_cast<DialogType>(x);
        return true;
    }
        break;
    
    default:
        LQTG_FETCH_ASSERT;
        return false;
    }
}

bool Types::Dialog::push(OutboundPkt *out) const {
    out->appendInt(m_classType);
    switch(m_classType) {
    case typeDialog: {
        m_peer.push(out);
        out->appendInt(m_topMessage);
        out->appendInt(m_readInboxMaxId);
        out->appendInt(m_unreadCount);
        m_notifySettings.push(out);
        return true;
    }
        break;
    
    default:
        return false;
    }
}

