// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "messageschatfull.h"

using namespace Tg;
using namespace Types;

Types::MessagesChatFull::MessagesChatFull(MessagesChatFullType classType, InboundPkt *in) :
    m_classType(classType)
{
    if(in) fetch(in);
}

Types::MessagesChatFull::MessagesChatFull(InboundPkt *in) :
    m_classType(typeMessagesChatFull)
{
    fetch(in);
}

void Types::MessagesChatFull::setChats(const QList<Chat> &chats) {
    m_chats = chats;
}

QList<Chat> Types::MessagesChatFull::chats() const {
    return m_chats;
}

void Types::MessagesChatFull::setFullChat(const ChatFull &fullChat) {
    m_fullChat = fullChat;
}

ChatFull Types::MessagesChatFull::fullChat() const {
    return m_fullChat;
}

void Types::MessagesChatFull::setUsers(const QList<User> &users) {
    m_users = users;
}

QList<User> Types::MessagesChatFull::users() const {
    return m_users;
}

bool Types::MessagesChatFull::operator ==(const MessagesChatFull &b) {
    return m_chats == b.m_chats &&
           m_fullChat == b.m_fullChat &&
           m_users == b.m_users;
}

void Types::MessagesChatFull::setClassType(MessagesChatFull::MessagesChatFullType classType) {
    m_classType = classType;
}

Types::MessagesChatFull::MessagesChatFullType Types::MessagesChatFull::classType() const {
    return m_classType;
}

bool Types::MessagesChatFull::fetch(InboundPkt *in) {
    LQTG_FETCH_LOG;
    int x = in->fetchInt();
    switch(x) {
    case typeMessagesChatFull: {
        m_fullChat.fetch(in);
        if(in->fetchInt() != (qint32)TL_Vector) return false;
        qint32 m_chats_length = in->fetchInt();
        m_chats.clear();
        for (qint32 i = 0; i < m_chats_length; i++) {
            Chat type;
            type.fetch(in);
            m_chats.append(type);
        }
        if(in->fetchInt() != (qint32)TL_Vector) return false;
        qint32 m_users_length = in->fetchInt();
        m_users.clear();
        for (qint32 i = 0; i < m_users_length; i++) {
            User type;
            type.fetch(in);
            m_users.append(type);
        }
        m_classType = static_cast<MessagesChatFullType>(x);
        return true;
    }
        break;
    
    default:
        LQTG_FETCH_ASSERT;
        return false;
    }
}

bool Types::MessagesChatFull::push(OutboundPkt *out) const {
    out->appendInt(m_classType);
    switch(m_classType) {
    case typeMessagesChatFull: {
        m_fullChat.push(out);
        out->appendInt(TL_Vector);
        out->appendInt(m_chats.count());
        for (qint32 i = 0; i < m_chats.count(); i++) {
            m_chats[i].push(out);
        }
        out->appendInt(TL_Vector);
        out->appendInt(m_users.count());
        for (qint32 i = 0; i < m_users.count(); i++) {
            m_users[i].push(out);
        }
        return true;
    }
        break;
    
    default:
        return false;
    }
}

