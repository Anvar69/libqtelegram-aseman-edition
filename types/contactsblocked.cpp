// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "contactsblocked.h"

using namespace Tg;
using namespace Types;

Types::ContactsBlocked::ContactsBlocked(ContactsBlockedType classType, InboundPkt *in) :
    m_count(0),
    m_classType(classType)
{
    if(in) fetch(in);
}

Types::ContactsBlocked::ContactsBlocked(InboundPkt *in) :
    m_count(0),
    m_classType(typeContactsBlocked)
{
    fetch(in);
}

void Types::ContactsBlocked::setBlocked(const QList<ContactBlocked> &blocked) {
    m_blocked = blocked;
}

QList<ContactBlocked> Types::ContactsBlocked::blocked() const {
    return m_blocked;
}

void Types::ContactsBlocked::setCount(qint32 count) {
    m_count = count;
}

qint32 Types::ContactsBlocked::count() const {
    return m_count;
}

void Types::ContactsBlocked::setUsers(const QList<User> &users) {
    m_users = users;
}

QList<User> Types::ContactsBlocked::users() const {
    return m_users;
}

bool Types::ContactsBlocked::operator ==(const ContactsBlocked &b) {
    return m_blocked == b.m_blocked &&
           m_count == b.m_count &&
           m_users == b.m_users;
}

void Types::ContactsBlocked::setClassType(ContactsBlocked::ContactsBlockedType classType) {
    m_classType = classType;
}

Types::ContactsBlocked::ContactsBlockedType Types::ContactsBlocked::classType() const {
    return m_classType;
}

bool Types::ContactsBlocked::fetch(InboundPkt *in) {
    LQTG_FETCH_LOG;
    int x = in->fetchInt();
    switch(x) {
    case typeContactsBlocked: {
        if(in->fetchInt() != (qint32)TL_Vector) return false;
        qint32 m_blocked_length = in->fetchInt();
        m_blocked.clear();
        for (qint32 i = 0; i < m_blocked_length; i++) {
            ContactBlocked type;
            type.fetch(in);
            m_blocked.append(type);
        }
        if(in->fetchInt() != (qint32)TL_Vector) return false;
        qint32 m_users_length = in->fetchInt();
        m_users.clear();
        for (qint32 i = 0; i < m_users_length; i++) {
            User type;
            type.fetch(in);
            m_users.append(type);
        }
        m_classType = static_cast<ContactsBlockedType>(x);
        return true;
    }
        break;
    
    case typeContactsBlockedSlice: {
        m_count = in->fetchInt();
        if(in->fetchInt() != (qint32)TL_Vector) return false;
        qint32 m_blocked_length = in->fetchInt();
        m_blocked.clear();
        for (qint32 i = 0; i < m_blocked_length; i++) {
            ContactBlocked type;
            type.fetch(in);
            m_blocked.append(type);
        }
        if(in->fetchInt() != (qint32)TL_Vector) return false;
        qint32 m_users_length = in->fetchInt();
        m_users.clear();
        for (qint32 i = 0; i < m_users_length; i++) {
            User type;
            type.fetch(in);
            m_users.append(type);
        }
        m_classType = static_cast<ContactsBlockedType>(x);
        return true;
    }
        break;
    
    default:
        LQTG_FETCH_ASSERT;
        return false;
    }
}

bool Types::ContactsBlocked::push(OutboundPkt *out) const {
    out->appendInt(m_classType);
    switch(m_classType) {
    case typeContactsBlocked: {
        out->appendInt(TL_Vector);
        out->appendInt(m_blocked.count());
        for (qint32 i = 0; i < m_blocked.count(); i++) {
            m_blocked[i].push(out);
        }
        out->appendInt(TL_Vector);
        out->appendInt(m_users.count());
        for (qint32 i = 0; i < m_users.count(); i++) {
            m_users[i].push(out);
        }
        return true;
    }
        break;
    
    case typeContactsBlockedSlice: {
        out->appendInt(m_count);
        out->appendInt(TL_Vector);
        out->appendInt(m_blocked.count());
        for (qint32 i = 0; i < m_blocked.count(); i++) {
            m_blocked[i].push(out);
        }
        out->appendInt(TL_Vector);
        out->appendInt(m_users.count());
        for (qint32 i = 0; i < m_users.count(); i++) {
            m_users[i].push(out);
        }
        return true;
    }
        break;
    
    default:
        return false;
    }
}

