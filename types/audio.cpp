// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "audio.h"
#include "core/inboundpkt.h"
#include "core/outboundpkt.h"

using namespace Tg;

Types::Audio::Audio(AudioType classType, InboundPkt *in) :
    m_accessHash(0),
    m_date(0),
    m_dcId(0),
    m_duration(0),
    m_id(0),
    m_size(0),
    m_userId(0),
    m_classType(classType)
{
    if(in) fetch(in);
}

Types::Audio::Audio(InboundPkt *in) :
    m_accessHash(0),
    m_date(0),
    m_dcId(0),
    m_duration(0),
    m_id(0),
    m_size(0),
    m_userId(0),
    m_classType(typeAudioEmpty)
{
    fetch(in);
}

void Types::Audio::setAccessHash(qint64 accessHash) {
    m_accessHash = accessHash;
}

qint64 Types::Audio::accessHash() const {
    return m_accessHash;
}

void Types::Audio::setDate(qint32 date) {
    m_date = date;
}

qint32 Types::Audio::date() const {
    return m_date;
}

void Types::Audio::setDcId(qint32 dcId) {
    m_dcId = dcId;
}

qint32 Types::Audio::dcId() const {
    return m_dcId;
}

void Types::Audio::setDuration(qint32 duration) {
    m_duration = duration;
}

qint32 Types::Audio::duration() const {
    return m_duration;
}

void Types::Audio::setId(qint64 id) {
    m_id = id;
}

qint64 Types::Audio::id() const {
    return m_id;
}

void Types::Audio::setMimeType(const QString &mimeType) {
    m_mimeType = mimeType;
}

QString Types::Audio::mimeType() const {
    return m_mimeType;
}

void Types::Audio::setSize(qint32 size) {
    m_size = size;
}

qint32 Types::Audio::size() const {
    return m_size;
}

void Types::Audio::setUserId(qint32 userId) {
    m_userId = userId;
}

qint32 Types::Audio::userId() const {
    return m_userId;
}

bool Audio::operator ==(const Audio &b) {
    return m_accessHash == b.m_accessHash &&
           m_date == b.m_date &&
           m_dcId == b.m_dcId &&
           m_duration == b.m_duration &&
           m_id == b.m_id &&
           m_mimeType == b.m_mimeType &&
           m_size == b.m_size &&
           m_userId == b.m_userId;
}

void Audio::setClassType(Audio::AudioType classType) {
    m_classType = classType;
}

Types::Audio::AudioType Audio::classType() const {
    return m_classType;
}

bool Types::Audio::fetch(InboundPkt *in) {
    LQTG_FETCH_LOG;
    int x = in->fetchInt();
    switch(x) {
    case typeAudioEmpty: {
        m_id = in->fetchLong();
        m_classType = static_cast<AudioType>(x);
        return true;
    }
        break;
    
    case typeAudio: {
        m_id = in->fetchLong();
        m_accessHash = in->fetchLong();
        m_userId = in->fetchInt();
        m_date = in->fetchInt();
        m_duration = in->fetchInt();
        m_mimeType = in->fetchQString();
        m_size = in->fetchInt();
        m_dcId = in->fetchInt();
        m_classType = static_cast<AudioType>(x);
        return true;
    }
        break;
    
    default:
        LQTG_FETCH_ASSERT;
        return false;
    }
}

bool Types::Audio::push(OutboundPkt *out) const {
    out->appendInt(m_classType);
    switch(m_classType) {
    case typeAudioEmpty: {
        out->appendLong(m_id);
        return true;
    }
        break;
    
    case typeAudio: {
        out->appendLong(m_id);
        out->appendLong(m_accessHash);
        out->appendInt(m_userId);
        out->appendInt(m_date);
        out->appendInt(m_duration);
        out->appendQString(m_mimeType);
        out->appendInt(m_size);
        out->appendInt(m_dcId);
        return true;
    }
        break;
    
    default:
        return false;
    }
}

