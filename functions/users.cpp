// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "users.h"
#include "core/inboundpkt.h"
#include "core/outboundpkt.h"

using namespace Tg;

Functions::Users::Users() {
}

Functions::Users::~Users() {
}

bool Functions::Users::getUsers(OutboundPkt *out, const QList<Types::InputUser> &id) {
    out->appendInt(fncUsersGetUsers);
    out->appendInt(TL_Vector);
    out->appendInt(id.count());
    for (qint32 i = 0; i < id.count(); i++) {
        if(!id[i].push(out)) return false;
    }
    return true;
}

QList<Types::User> Functions::Users::getUsersResult(InboundPkt *in) {
    QList<Types::User> result;
    if(in->fetchInt() != (qint32)TL_Vector) return result;
    qint32 result_length = in->fetchInt();
    result.clear();
    for (qint32 i = 0; i < result_length; i++) {
        Types::User type;
        if(!type.fetch(in)) return result;
        result.append(type);
    }
    return result;
}

bool Functions::Users::getFullUser(OutboundPkt *out, const Types::InputUser &id) {
    out->appendInt(fncUsersGetFullUser);
    if(!id.push(out)) return false;
    return true;
}

Types::UserFull Functions::Users::getFullUserResult(InboundPkt *in) {
    Types::UserFull result;
    if(!result.fetch(in)) return result;
    return result;
}

