// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#ifndef LQTG_FNC_CONTACTS
#define LQTG_FNC_CONTACTS

#include "telegramfunctionobject.h"
#include <QList>
#include "types/contactstatus.h"
#include "types/contactscontacts.h"
#include <QString>
#include "types/contactsimportedcontacts.h"
#include "types/inputcontact.h"
#include "types/contactssuggested.h"
#include <QtGlobal>
#include "types/contactslink.h"
#include "types/inputuser.h"
#include "types/contactsblocked.h"
#include "types/user.h"
#include "types/contactsfound.h"

namespace Tg {
namespace Functions {

class Contacts : public TelegramFunctionObject
{
public:
    enum ContactsFunction {
        fncContactsGetStatuses = 0xc4a353ee,
        fncContactsGetContacts = 0x22c6aa08,
        fncContactsImportContacts = 0xda30b32d,
        fncContactsGetSuggested = 0xcd773428,
        fncContactsDeleteContact = 0x8e953744,
        fncContactsDeleteContacts = 0x59ab389e,
        fncContactsBlock = 0x332b49fc,
        fncContactsUnblock = 0xe54100bd,
        fncContactsGetBlocked = 0xf57c350f,
        fncContactsExportCard = 0x84e53737,
        fncContactsImportCard = 0x4fe196fe,
        fncContactsSearch = 0x11f812d8,
        fncContactsResolveUsername = 0xbf0131c
    };

    Contacts();
    virtual ~Contacts();

    static bool getStatuses(OutboundPkt *out);
    static QList<Types::ContactStatus> getStatusesResult(InboundPkt *in);

    static bool getContacts(OutboundPkt *out, const QString &hash);
    static Types::ContactsContacts getContactsResult(InboundPkt *in);

    static bool importContacts(OutboundPkt *out, const QList<Types::InputContact> &contacts, bool replace);
    static Types::ContactsImportedContacts importContactsResult(InboundPkt *in);

    static bool getSuggested(OutboundPkt *out, qint32 limit);
    static Types::ContactsSuggested getSuggestedResult(InboundPkt *in);

    static bool deleteContact(OutboundPkt *out, const Types::InputUser &id);
    static Types::ContactsLink deleteContactResult(InboundPkt *in);

    static bool deleteContacts(OutboundPkt *out, const QList<Types::InputUser> &id);
    static bool deleteContactsResult(InboundPkt *in);

    static bool block(OutboundPkt *out, const Types::InputUser &id);
    static bool blockResult(InboundPkt *in);

    static bool unblock(OutboundPkt *out, const Types::InputUser &id);
    static bool unblockResult(InboundPkt *in);

    static bool getBlocked(OutboundPkt *out, qint32 offset, qint32 limit);
    static Types::ContactsBlocked getBlockedResult(InboundPkt *in);

    static bool exportCard(OutboundPkt *out);
    static QList<qint32> exportCardResult(InboundPkt *in);

    static bool importCard(OutboundPkt *out, const QList<qint32> &exportCard);
    static Types::User importCardResult(InboundPkt *in);

    static bool search(OutboundPkt *out, const QString &q, qint32 limit);
    static Types::ContactsFound searchResult(InboundPkt *in);

    static bool resolveUsername(OutboundPkt *out, const QString &username);
    static Types::User resolveUsernameResult(InboundPkt *in);

};

}
}

#endif // LQTG_FNC_CONTACTS
