// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "photos.h"

using namespace Tg;

Functions::Photos::Photos() {
}

Functions::Photos::~Photos() {
}

bool Functions::Photos::updateProfilePhoto(OutboundPkt *out, const Types::InputPhoto &id, const Types::InputPhotoCrop &crop) {
    out->appendInt(fncPhotosUpdateProfilePhoto);
    if(!id.push(out)) return false;
    if(!crop.push(out)) return false;
    return true;
}

Types::UserProfilePhoto Functions::Photos::updateProfilePhotoResult(InboundPkt *in) {
    Types::UserProfilePhoto result;
    if(!result.fetch(in)) return result;
    return result;
}

bool Functions::Photos::uploadProfilePhoto(OutboundPkt *out, const Types::InputFile &file, const QString &caption, const Types::InputGeoPoint &geoPoint, const Types::InputPhotoCrop &crop) {
    out->appendInt(fncPhotosUploadProfilePhoto);
    if(!file.push(out)) return false;
    out->appendQString(caption);
    if(!geoPoint.push(out)) return false;
    if(!crop.push(out)) return false;
    return true;
}

Types::PhotosPhoto Functions::Photos::uploadProfilePhotoResult(InboundPkt *in) {
    Types::PhotosPhoto result;
    if(!result.fetch(in)) return result;
    return result;
}

bool Functions::Photos::deletePhotos(OutboundPkt *out, const QList<Types::InputPhoto> &id) {
    out->appendInt(fncPhotosDeletePhotos);
    out->appendInt(TL_Vector);
    out->appendInt(id.count());
    for (qint32 i = 0; i < id.count(); i++) {
        if(!id[i].push(out)) return false;
    }
    return true;
}

QList<qint64> Functions::Photos::deletePhotosResult(InboundPkt *in) {
    QList<qint64> result;
    if(in->fetchInt() != (qint32)TL_Vector) return result;
    qint32 result_length = in->fetchInt();
    result.clear();
    for (qint32 i = 0; i < result_length; i++) {
        qint64 type;
        type = in->fetchLong();
        result.append(type);
    }
    return result;
}

bool Functions::Photos::getUserPhotos(OutboundPkt *out, const Types::InputUser &userId, qint32 offset, qint32 maxId, qint32 limit) {
    out->appendInt(fncPhotosGetUserPhotos);
    if(!userId.push(out)) return false;
    out->appendInt(offset);
    out->appendInt(maxId);
    out->appendInt(limit);
    return true;
}

Types::PhotosPhotos Functions::Photos::getUserPhotosResult(InboundPkt *in) {
    Types::PhotosPhotos result;
    if(!result.fetch(in)) return result;
    return result;
}

