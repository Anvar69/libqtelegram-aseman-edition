// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#ifndef LQTG_FNC_GEOCHATS
#define LQTG_FNC_GEOCHATS

#include "telegramfunctionobject.h"
#include "types/geochatslocated.h"
#include "types/inputgeopoint.h"
#include <QtGlobal>
#include "types/geochatsmessages.h"
#include "types/geochatsstatedmessage.h"
#include "types/inputgeochat.h"
#include "types/messageschatfull.h"
#include <QString>
#include "types/inputchatphoto.h"
#include "types/messagesfilter.h"
#include "types/inputmedia.h"

namespace Tg {
namespace Functions {

class Geochats : public TelegramFunctionObject
{
public:
    enum GeochatsFunction {
        fncGeochatsGetLocated = 0x7f192d8f,
        fncGeochatsGetRecents = 0xe1427e6f,
        fncGeochatsCheckin = 0x55b3e8fb,
        fncGeochatsGetFullChat = 0x6722dd6f,
        fncGeochatsEditChatTitle = 0x4c8e2273,
        fncGeochatsEditChatPhoto = 0x35d81a95,
        fncGeochatsSearch = 0xcfcdc44d,
        fncGeochatsGetHistory = 0xb53f7a68,
        fncGeochatsSetTyping = 0x8b8a729,
        fncGeochatsSendMessage = 0x61b0044,
        fncGeochatsSendMedia = 0xb8f0deff,
        fncGeochatsCreateGeoChat = 0xe092e16
    };

    Geochats();
    virtual ~Geochats();

    static bool getLocated(OutboundPkt *out, const Types::InputGeoPoint &geoPoint, qint32 radius, qint32 limit);
    static Types::GeochatsLocated getLocatedResult(InboundPkt *in);

    static bool getRecents(OutboundPkt *out, qint32 offset, qint32 limit);
    static Types::GeochatsMessages getRecentsResult(InboundPkt *in);

    static bool checkin(OutboundPkt *out, const Types::InputGeoChat &peer);
    static Types::GeochatsStatedMessage checkinResult(InboundPkt *in);

    static bool getFullChat(OutboundPkt *out, const Types::InputGeoChat &peer);
    static Types::MessagesChatFull getFullChatResult(InboundPkt *in);

    static bool editChatTitle(OutboundPkt *out, const Types::InputGeoChat &peer, const QString &title, const QString &address);
    static Types::GeochatsStatedMessage editChatTitleResult(InboundPkt *in);

    static bool editChatPhoto(OutboundPkt *out, const Types::InputGeoChat &peer, const Types::InputChatPhoto &photo);
    static Types::GeochatsStatedMessage editChatPhotoResult(InboundPkt *in);

    static bool search(OutboundPkt *out, const Types::InputGeoChat &peer, const QString &q, const Types::MessagesFilter &filter, qint32 minDate, qint32 maxDate, qint32 offset, qint32 maxId, qint32 limit);
    static Types::GeochatsMessages searchResult(InboundPkt *in);

    static bool getHistory(OutboundPkt *out, const Types::InputGeoChat &peer, qint32 offset, qint32 maxId, qint32 limit);
    static Types::GeochatsMessages getHistoryResult(InboundPkt *in);

    static bool setTyping(OutboundPkt *out, const Types::InputGeoChat &peer, bool typing);
    static bool setTypingResult(InboundPkt *in);

    static bool sendMessage(OutboundPkt *out, const Types::InputGeoChat &peer, const QString &message, qint64 randomId);
    static Types::GeochatsStatedMessage sendMessageResult(InboundPkt *in);

    static bool sendMedia(OutboundPkt *out, const Types::InputGeoChat &peer, const Types::InputMedia &media, qint64 randomId);
    static Types::GeochatsStatedMessage sendMediaResult(InboundPkt *in);

    static bool createGeoChat(OutboundPkt *out, const QString &title, const Types::InputGeoPoint &geoPoint, const QString &address, const QString &venue);
    static Types::GeochatsStatedMessage createGeoChatResult(InboundPkt *in);

};

}
}

#endif // LQTG_FNC_GEOCHATS
