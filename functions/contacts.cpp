// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "contacts.h"

using namespace Tg;

Functions::Contacts::Contacts() {
}

Functions::Contacts::~Contacts() {
}

bool Functions::Contacts::getStatuses(OutboundPkt *out) {
    out->appendInt(fncContactsGetStatuses);
    return true;
}

QList<Types::ContactStatus> Functions::Contacts::getStatusesResult(InboundPkt *in) {
    QList<Types::ContactStatus> result;
    if(in->fetchInt() != (qint32)TL_Vector) return result;
    qint32 result_length = in->fetchInt();
    result.clear();
    for (qint32 i = 0; i < result_length; i++) {
        Types::ContactStatus type;
        if(!type.fetch(in)) return result;
        result.append(type);
    }
    return result;
}

bool Functions::Contacts::getContacts(OutboundPkt *out, const QString &hash) {
    out->appendInt(fncContactsGetContacts);
    out->appendQString(hash);
    return true;
}

Types::ContactsContacts Functions::Contacts::getContactsResult(InboundPkt *in) {
    Types::ContactsContacts result;
    if(!result.fetch(in)) return result;
    return result;
}

bool Functions::Contacts::importContacts(OutboundPkt *out, const QList<Types::InputContact> &contacts, bool replace) {
    out->appendInt(fncContactsImportContacts);
    out->appendInt(TL_Vector);
    out->appendInt(contacts.count());
    for (qint32 i = 0; i < contacts.count(); i++) {
        if(!contacts[i].push(out)) return false;
    }
    out->appendBool(replace);
    return true;
}

Types::ContactsImportedContacts Functions::Contacts::importContactsResult(InboundPkt *in) {
    Types::ContactsImportedContacts result;
    if(!result.fetch(in)) return result;
    return result;
}

bool Functions::Contacts::getSuggested(OutboundPkt *out, qint32 limit) {
    out->appendInt(fncContactsGetSuggested);
    out->appendInt(limit);
    return true;
}

Types::ContactsSuggested Functions::Contacts::getSuggestedResult(InboundPkt *in) {
    Types::ContactsSuggested result;
    if(!result.fetch(in)) return result;
    return result;
}

bool Functions::Contacts::deleteContact(OutboundPkt *out, const Types::InputUser &id) {
    out->appendInt(fncContactsDeleteContact);
    if(!id.push(out)) return false;
    return true;
}

Types::ContactsLink Functions::Contacts::deleteContactResult(InboundPkt *in) {
    Types::ContactsLink result;
    if(!result.fetch(in)) return result;
    return result;
}

bool Functions::Contacts::deleteContacts(OutboundPkt *out, const QList<Types::InputUser> &id) {
    out->appendInt(fncContactsDeleteContacts);
    out->appendInt(TL_Vector);
    out->appendInt(id.count());
    for (qint32 i = 0; i < id.count(); i++) {
        if(!id[i].push(out)) return false;
    }
    return true;
}

bool Functions::Contacts::deleteContactsResult(InboundPkt *in) {
    bool result;
    result = in->fetchBool();
    return result;
}

bool Functions::Contacts::block(OutboundPkt *out, const Types::InputUser &id) {
    out->appendInt(fncContactsBlock);
    if(!id.push(out)) return false;
    return true;
}

bool Functions::Contacts::blockResult(InboundPkt *in) {
    bool result;
    result = in->fetchBool();
    return result;
}

bool Functions::Contacts::unblock(OutboundPkt *out, const Types::InputUser &id) {
    out->appendInt(fncContactsUnblock);
    if(!id.push(out)) return false;
    return true;
}

bool Functions::Contacts::unblockResult(InboundPkt *in) {
    bool result;
    result = in->fetchBool();
    return result;
}

bool Functions::Contacts::getBlocked(OutboundPkt *out, qint32 offset, qint32 limit) {
    out->appendInt(fncContactsGetBlocked);
    out->appendInt(offset);
    out->appendInt(limit);
    return true;
}

Types::ContactsBlocked Functions::Contacts::getBlockedResult(InboundPkt *in) {
    Types::ContactsBlocked result;
    if(!result.fetch(in)) return result;
    return result;
}

bool Functions::Contacts::exportCard(OutboundPkt *out) {
    out->appendInt(fncContactsExportCard);
    return true;
}

QList<qint32> Functions::Contacts::exportCardResult(InboundPkt *in) {
    QList<qint32> result;
    if(in->fetchInt() != (qint32)TL_Vector) return result;
    qint32 result_length = in->fetchInt();
    result.clear();
    for (qint32 i = 0; i < result_length; i++) {
        qint32 type;
        type = in->fetchInt();
        result.append(type);
    }
    return result;
}

bool Functions::Contacts::importCard(OutboundPkt *out, const QList<qint32> &exportCard) {
    out->appendInt(fncContactsImportCard);
    out->appendInt(TL_Vector);
    out->appendInt(exportCard.count());
    for (qint32 i = 0; i < exportCard.count(); i++) {
        out->appendInt(exportCard[i]);
    }
    return true;
}

Types::User Functions::Contacts::importCardResult(InboundPkt *in) {
    Types::User result;
    if(!result.fetch(in)) return result;
    return result;
}

bool Functions::Contacts::search(OutboundPkt *out, const QString &q, qint32 limit) {
    out->appendInt(fncContactsSearch);
    out->appendQString(q);
    out->appendInt(limit);
    return true;
}

Types::ContactsFound Functions::Contacts::searchResult(InboundPkt *in) {
    Types::ContactsFound result;
    if(!result.fetch(in)) return result;
    return result;
}

bool Functions::Contacts::resolveUsername(OutboundPkt *out, const QString &username) {
    out->appendInt(fncContactsResolveUsername);
    out->appendQString(username);
    return true;
}

Types::User Functions::Contacts::resolveUsernameResult(InboundPkt *in) {
    Types::User result;
    if(!result.fetch(in)) return result;
    return result;
}

