// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "inputpeer.h"
#include "core/inboundpkt.h"
#include "core/outboundpkt.h"
#include "../coretypes.h"

InputPeer::InputPeer(InputPeerType classType, InboundPkt *in) :
    m_accessHash(0),
    m_channelId(0),
    m_chatId(0),
    m_userId(0),
    m_classType(classType)
{
    if(in) fetch(in);
}

InputPeer::InputPeer(InboundPkt *in) :
    m_accessHash(0),
    m_channelId(0),
    m_chatId(0),
    m_userId(0),
    m_classType(typeInputPeerEmpty)
{
    fetch(in);
}

InputPeer::InputPeer(const Null &null) :
    TelegramTypeObject(null),
    m_accessHash(0),
    m_channelId(0),
    m_chatId(0),
    m_userId(0),
    m_classType(typeInputPeerEmpty)
{
}

InputPeer::~InputPeer() {
}

void InputPeer::setAccessHash(qint64 accessHash) {
    m_accessHash = accessHash;
}

qint64 InputPeer::accessHash() const {
    return m_accessHash;
}

void InputPeer::setChannelId(qint32 channelId) {
    m_channelId = channelId;
}

qint32 InputPeer::channelId() const {
    return m_channelId;
}

void InputPeer::setChatId(qint32 chatId) {
    m_chatId = chatId;
}

qint32 InputPeer::chatId() const {
    return m_chatId;
}

void InputPeer::setUserId(qint32 userId) {
    m_userId = userId;
}

qint32 InputPeer::userId() const {
    return m_userId;
}

bool InputPeer::operator ==(const InputPeer &b) const {
    return m_classType == b.m_classType &&
           m_accessHash == b.m_accessHash &&
           m_channelId == b.m_channelId &&
           m_chatId == b.m_chatId &&
           m_userId == b.m_userId;
}

void InputPeer::setClassType(InputPeer::InputPeerType classType) {
    m_classType = classType;
}

InputPeer::InputPeerType InputPeer::classType() const {
    return m_classType;
}

bool InputPeer::fetch(InboundPkt *in) {
    LQTG_FETCH_LOG;
    int x = in->fetchInt();
    switch(x) {
    case typeInputPeerEmpty: {
        m_classType = static_cast<InputPeerType>(x);
        return true;
    }
        break;
    
    case typeInputPeerSelf: {
        m_classType = static_cast<InputPeerType>(x);
        return true;
    }
        break;
    
    case typeInputPeerChat: {
        m_chatId = in->fetchInt();
        m_classType = static_cast<InputPeerType>(x);
        return true;
    }
        break;
    
    case typeInputPeerUser: {
        m_userId = in->fetchInt();
        m_accessHash = in->fetchLong();
        m_classType = static_cast<InputPeerType>(x);
        return true;
    }
        break;
    
    case typeInputPeerChannel: {
        m_channelId = in->fetchInt();
        m_accessHash = in->fetchLong();
        m_classType = static_cast<InputPeerType>(x);
        return true;
    }
        break;
    
    default:
        LQTG_FETCH_ASSERT;
        return false;
    }
}

bool InputPeer::push(OutboundPkt *out) const {
    out->appendInt(m_classType);
    switch(m_classType) {
    case typeInputPeerEmpty: {
        return true;
    }
        break;
    
    case typeInputPeerSelf: {
        return true;
    }
        break;
    
    case typeInputPeerChat: {
        out->appendInt(m_chatId);
        return true;
    }
        break;
    
    case typeInputPeerUser: {
        out->appendInt(m_userId);
        out->appendLong(m_accessHash);
        return true;
    }
        break;
    
    case typeInputPeerChannel: {
        out->appendInt(m_channelId);
        out->appendLong(m_accessHash);
        return true;
    }
        break;
    
    default:
        return false;
    }
}

