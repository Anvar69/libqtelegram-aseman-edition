// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "inputpeernotifyeventsobject.h"

InputPeerNotifyEventsObject::InputPeerNotifyEventsObject(const InputPeerNotifyEvents &core, QObject *parent) :
    TelegramTypeQObject(parent),
    m_core(core)
{
}

InputPeerNotifyEventsObject::InputPeerNotifyEventsObject(QObject *parent) :
    TelegramTypeQObject(parent),
    m_core()
{
}

InputPeerNotifyEventsObject::~InputPeerNotifyEventsObject() {
}

InputPeerNotifyEventsObject &InputPeerNotifyEventsObject::operator =(const InputPeerNotifyEvents &b) {
    if(m_core == b) return *this;
    m_core = b;

    Q_EMIT coreChanged();
    return *this;
}

bool InputPeerNotifyEventsObject::operator ==(const InputPeerNotifyEvents &b) const {
    return m_core == b;
}

void InputPeerNotifyEventsObject::setClassType(int classType) {
    InputPeerNotifyEvents::InputPeerNotifyEventsType result;
    switch(classType) {
    case TypeInputPeerNotifyEventsEmpty:
        result = InputPeerNotifyEvents::typeInputPeerNotifyEventsEmpty;
        break;
    case TypeInputPeerNotifyEventsAll:
        result = InputPeerNotifyEvents::typeInputPeerNotifyEventsAll;
        break;
    }

    if(m_core.classType() == result) return;
    m_core.setClassType(result);
    Q_EMIT classTypeChanged();
    Q_EMIT coreChanged();
}

int InputPeerNotifyEventsObject::classType() const {
    int result;
    switch(static_cast<qint64>(m_core.classType())) {
    case InputPeerNotifyEvents::typeInputPeerNotifyEventsEmpty:
        result = TypeInputPeerNotifyEventsEmpty;
        break;
    case InputPeerNotifyEvents::typeInputPeerNotifyEventsAll:
        result = TypeInputPeerNotifyEventsAll;
        break;
    }

    return result;
}

void InputPeerNotifyEventsObject::setCore(const InputPeerNotifyEvents &core) {
    operator =(core);
}

InputPeerNotifyEvents InputPeerNotifyEventsObject::core() const {
    return m_core;
}

